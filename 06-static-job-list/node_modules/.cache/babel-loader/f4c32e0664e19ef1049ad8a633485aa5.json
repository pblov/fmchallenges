{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\05-static-job-list\\\\src\\\\JobListingApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { JobCard } from './components/JobCard';\nimport dataJob from './data/data.json';\nimport { Container, Grid } from '@material-ui/core';\nimport { Header } from './components/Header';\nimport { Filter } from './components/Filter';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(them => {\n  return {\n    filterContainer: {\n      padding: '0px 30px',\n      backgroundColor: 'red'\n    },\n    jobContainer: {\n      border: '1px solid red',\n      margin: '100px auto',\n      padding: '0px 30px'\n    },\n    gridFilter: {\n      backgroundColor: 'blue',\n      padding: '27px'\n    }\n  };\n});\nexport const JobListingApp = () => {\n  _s();\n\n  const {\n    filterContainer,\n    jobContainer,\n    gridFilter\n  } = useStyles();\n  const [jobList, setJobList] = useState([]);\n  const [filters, setFilters] = useState([]);\n  useEffect(() => {\n    setJobList(dataJob);\n  }, []);\n\n  const handleFilter = ({\n    role,\n    level,\n    languages,\n    tools\n  }) => {\n    const buttons = [role, level, ...languages, ...tools];\n\n    if (filters.length === 0) {\n      return true;\n    }\n\n    return filters.every(tag => buttons.includes(tag));\n  };\n\n  const filteredJobs = jobList.filter(handleFilter);\n\n  const handleClick = buttons => {\n    if (!filters.includes(buttons)) {\n      setFilters([...filters, buttons]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: filterContainer,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        className: gridFilter,\n        children: [filters.length > 0 && filters.map(filter => /*#__PURE__*/_jsxDEV(Filter, {\n          fil: filter\n        }, filter, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 41\n        }, this)), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 3,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: jobContainer,\n      children: filteredJobs.map(jobs => /*#__PURE__*/_jsxDEV(JobCard, {\n        job: jobs,\n        handleClick: handleClick\n      }, jobs.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }, this)) // onClick={handleClick} \n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(JobListingApp, \"qIAT0igo2BGRHThaCazLTdng2R0=\", false, function () {\n  return [useStyles];\n});\n\n_c = JobListingApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobListingApp\");","map":{"version":3,"sources":["E:/React/05-static-job-list/src/JobListingApp.js"],"names":["React","useEffect","useState","JobCard","dataJob","Container","Grid","Header","Filter","makeStyles","useStyles","them","filterContainer","padding","backgroundColor","jobContainer","border","margin","gridFilter","JobListingApp","jobList","setJobList","filters","setFilters","handleFilter","role","level","languages","tools","buttons","length","every","tag","includes","filteredJobs","filter","handleClick","map","jobs","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { JobCard } from './components/JobCard';\r\nimport dataJob from './data/data.json';\r\nimport { Container,Grid } from '@material-ui/core';\r\nimport { Header } from './components/Header';\r\nimport { Filter } from './components/Filter';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles( them => {\r\n\r\n    return{\r\n\r\n        filterContainer:{\r\n            \r\n            padding:'0px 30px',\r\n            backgroundColor:'red',\r\n            \r\n        },\r\n\r\n        jobContainer:{\r\n            border:'1px solid red',\r\n            margin:'100px auto',\r\n            padding:'0px 30px'\r\n        },\r\n\r\n        gridFilter:{\r\n            backgroundColor:'blue',\r\n            padding:'27px',\r\n        }\r\n\r\n    \r\n    }\r\n\r\n});\r\n\r\nexport const JobListingApp = () => {\r\n\r\n    const {filterContainer,jobContainer,gridFilter} = useStyles();\r\n    const [jobList, setJobList] = useState([]);\r\n    const [filters, setFilters] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        \r\n        setJobList(dataJob);\r\n\r\n    }, []);\r\n\r\n\r\n   \r\n\r\n    const handleFilter = ({role,level,languages,tools}) => {\r\n\r\n        \r\n        const buttons = [role,level,...languages, ...tools];\r\n        \r\n        if(filters.length === 0){\r\n            return true;\r\n        }\r\n\r\n        return filters.every((tag) => buttons.includes(tag));\r\n    }\r\n  \r\n\r\n   const filteredJobs = jobList.filter(handleFilter);\r\n\r\n\r\n   const handleClick = (buttons) => {\r\n       if(!filters.includes(buttons)){\r\n        setFilters([...filters,buttons]);\r\n       }\r\n      \r\n   }\r\n \r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <Header/> \r\n\r\n            <Container className={filterContainer}>\r\n\r\n                <Grid container className={gridFilter} >\r\n                    {\r\n                        filters.length > 0 && filters.map(\r\n                            (filter) => <Filter key={filter} fil={filter}></Filter>  )\r\n                    }\r\n\r\n                    <Grid item md={3} >\r\n                        <p>Clear</p>\r\n                    </Grid>\r\n                </Grid>\r\n                                        \r\n            </Container>\r\n\r\n\r\n            <Container className={jobContainer}>\r\n                \r\n                {\r\n                    filteredJobs.map(jobs => \r\n                        <JobCard  key={jobs.id}  job={jobs} handleClick={handleClick} />\r\n                    )\r\n                   // onClick={handleClick} \r\n                }\r\n\r\n\r\n            </Container>\r\n\r\n        </>\r\n       \r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}